{"ast":null,"code":"var _jsxFileName = \"/Users/jaylenschelb/dev/courses/Year 2/Term 3/ACS 1310/final_project/src/components/HighestGDP.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport FlagStat from \"./FlagStat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet highest_gdp = [0, ''];\nlet gdp_array = [[0, '']];\nlet prev_country = '';\nlet prev_selected = false;\n\nfunction HighestGDP(_ref) {\n  _s();\n\n  let {\n    mapState,\n    country_data,\n    country_gdp\n  } = _ref;\n  const [topCountry, setTopCountry] = useState([0, '']);\n\n  function calculateHighestGDP() {\n    prev_country = mapState.countryCode;\n    prev_selected = mapState.isSelected;\n    console.log(mapState);\n    let gdp = country_gdp.find(i => i.country === mapState.countryName).imfGDP;\n\n    if (!mapState.isSelected) {\n      gdp_array = gdp_array.filter(function (e) {\n        return e[0] !== gdp;\n      });\n\n      if (gdp === highest_gdp[0]) {\n        highest_gdp = Math.max(gdp_array);\n        setTopCountry(highest_gdp);\n      }\n\n      return;\n    }\n\n    let flag = country_data.find(i => i.cca2 === mapState.countryCode).flag;\n    gdp_array.push([gdp, flag]);\n\n    if (gdp > highest_gdp[0]) {\n      highest_gdp = [gdp, flag];\n      setTopCountry(highest_gdp);\n    }\n  }\n\n  if (mapState.countryCode !== '' && (mapState.countryCode !== prev_country || mapState.isSelected !== prev_selected)) {\n    calculateHighestGDP();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"HighestGDP\",\n    children: /*#__PURE__*/_jsxDEV(FlagStat, {\n      valueEnd: topCountry[0],\n      country_flag: topCountry[1],\n      heading_text: \"ðŸ’¸ Highest GDP:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(HighestGDP, \"jjwqwoM7OiVwCjvaBQZwEp/60+I=\");\n\n_c = HighestGDP;\nexport default HighestGDP;\n\nvar _c;\n\n$RefreshReg$(_c, \"HighestGDP\");","map":{"version":3,"sources":["/Users/jaylenschelb/dev/courses/Year 2/Term 3/ACS 1310/final_project/src/components/HighestGDP.js"],"names":["useState","FlagStat","highest_gdp","gdp_array","prev_country","prev_selected","HighestGDP","mapState","country_data","country_gdp","topCountry","setTopCountry","calculateHighestGDP","countryCode","isSelected","console","log","gdp","find","i","country","countryName","imfGDP","filter","e","Math","max","flag","cca2","push"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAIC,WAAW,GAAG,CAAC,CAAD,EAAI,EAAJ,CAAlB;AACA,IAAIC,SAAS,GAAG,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,CAAhB;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,aAAa,GAAG,KAApB;;AAEA,SAASC,UAAT,OAA6D;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,GAAyC;AACzD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,CAA5C;;AAEA,WAASY,mBAAT,GAA+B;AAC3BR,IAAAA,YAAY,GAAGG,QAAQ,CAACM,WAAxB;AACAR,IAAAA,aAAa,GAAGE,QAAQ,CAACO,UAAzB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA,QAAIU,GAAG,GAAGR,WAAW,CAACS,IAAZ,CAAiBC,CAAC,IAAEA,CAAC,CAACC,OAAF,KAAcb,QAAQ,CAACc,WAA3C,EAAwDC,MAAlE;;AAEA,QAAI,CAACf,QAAQ,CAACO,UAAd,EAA0B;AACtBX,MAAAA,SAAS,GAAGA,SAAS,CAACoB,MAAV,CAAiB,UAASC,CAAT,EAAY;AAAE,eAAOA,CAAC,CAAC,CAAD,CAAD,KAASP,GAAhB;AAAqB,OAApD,CAAZ;;AAEA,UAAIA,GAAG,KAAKf,WAAW,CAAC,CAAD,CAAvB,EAA4B;AACxBA,QAAAA,WAAW,GAAGuB,IAAI,CAACC,GAAL,CAASvB,SAAT,CAAd;AACAQ,QAAAA,aAAa,CAACT,WAAD,CAAb;AACH;;AAED;AACH;;AAED,QAAIyB,IAAI,GAAGnB,YAAY,CAACU,IAAb,CAAkBC,CAAC,IAAEA,CAAC,CAACS,IAAF,KAAWrB,QAAQ,CAACM,WAAzC,EAAsDc,IAAjE;AACAxB,IAAAA,SAAS,CAAC0B,IAAV,CAAe,CAACZ,GAAD,EAAMU,IAAN,CAAf;;AAEA,QAAIV,GAAG,GAAGf,WAAW,CAAC,CAAD,CAArB,EAA0B;AACtBA,MAAAA,WAAW,GAAG,CAACe,GAAD,EAAMU,IAAN,CAAd;AACAhB,MAAAA,aAAa,CAACT,WAAD,CAAb;AACH;AACJ;;AAED,MAAIK,QAAQ,CAACM,WAAT,KAAyB,EAAzB,KAAgCN,QAAQ,CAACM,WAAT,KAAyBT,YAAzB,IAAyCG,QAAQ,CAACO,UAAT,KAAwBT,aAAjG,CAAJ,EAAqH;AACjHO,IAAAA,mBAAmB;AACtB;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI,QAAC,QAAD;AACI,MAAA,QAAQ,EAAEF,UAAU,CAAC,CAAD,CADxB;AAEI,MAAA,YAAY,EAAEA,UAAU,CAAC,CAAD,CAF5B;AAGI,MAAA,YAAY,EAAE;AAHlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GA3CQJ,U;;KAAAA,U;AA6CP,eAAeA,UAAf","sourcesContent":["import { useState } from 'react'\nimport FlagStat from \"./FlagStat\";\n\nlet highest_gdp = [0, '']\nlet gdp_array = [[0, '']]\nlet prev_country = ''\nlet prev_selected = false\n\nfunction HighestGDP({ mapState, country_data, country_gdp }) {\n    const [topCountry, setTopCountry] = useState([0, '']);\n\n    function calculateHighestGDP() {\n        prev_country = mapState.countryCode\n        prev_selected = mapState.isSelected\n        \n        console.log(mapState)\n        let gdp = country_gdp.find(i=>i.country === mapState.countryName).imfGDP\n\n        if (!mapState.isSelected) {\n            gdp_array = gdp_array.filter(function(e) { return e[0] !== gdp })\n\n            if (gdp === highest_gdp[0]) {\n                highest_gdp = Math.max(gdp_array)\n                setTopCountry(highest_gdp)\n            }\n\n            return\n        }\n\n        let flag = country_data.find(i=>i.cca2 === mapState.countryCode).flag\n        gdp_array.push([gdp, flag])\n\n        if (gdp > highest_gdp[0]) {\n            highest_gdp = [gdp, flag]\n            setTopCountry(highest_gdp)\n        }\n    }\n\n    if (mapState.countryCode !== '' && (mapState.countryCode !== prev_country || mapState.isSelected !== prev_selected)) {\n        calculateHighestGDP()\n    }\n\n    return (\n        <div className=\"HighestGDP\">\n            <FlagStat\n                valueEnd={topCountry[0]}\n                country_flag={topCountry[1]}\n                heading_text={\"ðŸ’¸ Highest GDP:\"}\n            />\n        </div>\n    )\n}\n  \n  export default HighestGDP"]},"metadata":{},"sourceType":"module"}