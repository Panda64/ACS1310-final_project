{"ast":null,"code":"var _jsxFileName = \"/Users/jaylenschelb/dev/courses/Year 2/Term 3/ACS 1310/final_project/src/components/Map.js\";\nimport React from \"react\";\nimport { VectorMap } from \"@react-jvectormap/core\";\nimport { worldMill } from \"@react-jvectormap/world\";\nimport styled from \"@emotion/styled\";\nimport './Map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  getName\n} = require(\"country-list\");\n\nclass Map extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      countriesCodesArray: [],\n      countriesNamesArray: [],\n      data: {},\n      title: \"\",\n      titleSet: false,\n      color: \"#48aeef\"\n    };\n\n    this.handleColorChange = color => {\n      console.log(color.hex);\n      this.setState({\n        color: color.hex\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        title: e.target.value\n      });\n    };\n\n    this.handleFormSubmit = () => {\n      this.setState({\n        titleSet: true\n      });\n    };\n\n    this.handleClick = (e, countryCode) => {\n      const {\n        countriesCodesArray\n      } = this.state; // console.log(countryCode);\n\n      if (countriesCodesArray.indexOf(countryCode) === -1) {\n        this.setState({\n          countriesCodesArray: [...countriesCodesArray, countryCode]\n        }, () => this.getCountriesNamesList());\n      }\n    };\n\n    this.getCountriesNamesList = () => {\n      const {\n        countriesCodesArray\n      } = this.state;\n      const list = countriesCodesArray.map(code => getName(code));\n      this.setState({\n        countriesNamesArray: list\n      }, () => this.makeMapDataStructure());\n    };\n\n    this.makeMapDataStructure = () => {\n      const {\n        countriesCodesArray\n      } = this.state;\n      let obj = {}; //{CN: 5, MX: 5, TX: 5}\n\n      countriesCodesArray.forEach(countryCode => obj[countryCode] = 5);\n      this.setState({\n        data: obj\n      });\n    };\n  }\n\n  render() {\n    const {\n      countriesNamesArray,\n      data,\n      color\n    } = this.state; // console.log(data)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(VectorMap, {\n        map: worldMill,\n        backgroundColor: \"transparent\" // change it to ocean blue: #0077be\n        ,\n        zoomOnScroll: true,\n        style: {\n          width: \"100%\",\n          height: \"520px\"\n        },\n        onRegionClick: this.handleClick // gets the country code\n        ,\n        className: \"map\",\n        regionStyle: {\n          initial: {\n            fill: \"#e4e4e4\",\n            \"fill-opacity\": 0.9,\n            stroke: \"none\",\n            \"stroke-width\": 0,\n            \"stroke-opacity\": 0\n          },\n          hover: {\n            \"fill-opacity\": 0.8,\n            cursor: \"pointer\"\n          },\n          selected: {\n            fill: \"#2938bc\" // color for the clicked country\n\n          },\n          selectedHover: {}\n        },\n        regionsSelectable: true,\n        series: {\n          regions: [{\n            values: data,\n            // this is the map data\n            scale: [\"#e4e4e4\", color],\n            // your color game's here\n            normalizeFunction: \"polynomial\"\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Map;\nconst Container = styled.div`\n  text-align: center;\n  input {\n    padding: 10px;\n    border-radius: 5px;\n    border-shadow: 0;\n    border-style: solid;\n    font-size: 16px;\n    &:focus {\n      outline: none;\n    }\n  }\n`; // const ColorPickerContainer = styled.div`\n//   position: absolute;\n// `;\n\n_c = Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/Users/jaylenschelb/dev/courses/Year 2/Term 3/ACS 1310/final_project/src/components/Map.js"],"names":["React","VectorMap","worldMill","styled","getName","require","Map","Component","state","countriesCodesArray","countriesNamesArray","data","title","titleSet","color","handleColorChange","console","log","hex","setState","handleChange","e","target","value","handleFormSubmit","handleClick","countryCode","indexOf","getCountriesNamesList","list","map","code","makeMapDataStructure","obj","forEach","render","width","height","initial","fill","stroke","hover","cursor","selected","selectedHover","regions","values","scale","normalizeFunction","Container","div"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { VectorMap } from \"@react-jvectormap/core\";\nimport { worldMill } from \"@react-jvectormap/world\"\n\nimport styled from \"@emotion/styled\";\nimport './Map.css';\n\nconst { getName } = require(\"country-list\");\n\nclass Map extends React.Component {\n  state = {\n    countriesCodesArray: [],\n    countriesNamesArray: [],\n    data: {},\n    title: \"\",\n    titleSet: false,\n    color: \"#48aeef\"\n  };\n\n  handleColorChange = color => {\n    console.log(color.hex);\n    this.setState({ color: color.hex });\n  };\n\n  handleChange = e => {\n    this.setState({\n      title: e.target.value\n    });\n  };\n\n  handleFormSubmit = () => {\n    this.setState({\n      titleSet: true\n    });\n  };\n\n  handleClick = (e, countryCode) => {\n    const { countriesCodesArray } = this.state;\n    // console.log(countryCode);\n    if (countriesCodesArray.indexOf(countryCode) === -1) {\n      this.setState(\n        {\n          countriesCodesArray: [...countriesCodesArray, countryCode]\n        },\n        () => this.getCountriesNamesList()\n      );\n    }\n  };\n\n  getCountriesNamesList = () => {\n    const { countriesCodesArray } = this.state;\n    const list = countriesCodesArray.map(code => getName(code));\n    this.setState(\n      {\n        countriesNamesArray: list\n      },\n      () => this.makeMapDataStructure()\n    );\n  };\n\n  makeMapDataStructure = () => {\n    const { countriesCodesArray } = this.state;\n    let obj = {};\n    //{CN: 5, MX: 5, TX: 5}\n    countriesCodesArray.forEach(countryCode => (obj[countryCode] = 5));\n    this.setState({\n      data: obj\n    });\n  };\n\n  render() {\n    const { countriesNamesArray, data, color } = this.state;\n    // console.log(data)\n    return (\n      <div>\n        <VectorMap\n          map={ worldMill }\n          backgroundColor=\"transparent\" // change it to ocean blue: #0077be\n          zoomOnScroll={true}\n          style={{\n            width: \"100%\",\n            height: \"520px\"\n          }}\n          onRegionClick={this.handleClick} // gets the country code\n          className=\"map\"\n          regionStyle={{\n            initial: {\n              fill: \"#e4e4e4\",\n              \"fill-opacity\": 0.9,\n              stroke: \"none\",\n              \"stroke-width\": 0,\n              \"stroke-opacity\": 0\n            },\n            hover: {\n              \"fill-opacity\": 0.8,\n              cursor: \"pointer\"\n            },\n            selected: {\n              fill: \"#2938bc\" // color for the clicked country\n            },\n            selectedHover: {}\n          }}\n          regionsSelectable={true}\n          series={{\n            regions: [\n              {\n                values: data, // this is the map data\n                scale: [\"#e4e4e4\", color], // your color game's here\n                normalizeFunction: \"polynomial\"\n              }\n            ]\n          }}\n        />\n        <Container>\n          {/* {titleSet ? (\n            <h3>{title}</h3>\n          ) : (\n            <div>\n              <h4>Set your map's title:</h4>\n              <form onSubmit={this.handleFormSubmit}>\n                <input type=\"text\" onChange={this.handleChange} />\n              </form>\n            </div>\n          )}\n          <ColorPickerContainer>\n            <ColorPicker\n              handleColorChange={this.handleColorChange}\n              color={color}\n            />\n          </ColorPickerContainer> */}\n          {/* <div>\n            {countriesNamesArray.map((country, i) => (\n              <div key={i}>{country}</div>\n            ))}\n          </div> */}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n\nconst Container = styled.div`\n  text-align: center;\n  input {\n    padding: 10px;\n    border-radius: 5px;\n    border-shadow: 0;\n    border-style: solid;\n    font-size: 16px;\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n// const ColorPickerContainer = styled.div`\n//   position: absolute;\n// `;"]},"metadata":{},"sourceType":"module"}