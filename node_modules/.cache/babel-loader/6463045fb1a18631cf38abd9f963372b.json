{"ast":null,"code":"var _jsxFileName = \"/Users/jaylenschelb/dev/courses/Year 2/Term 3/ACS 1310/final_project/src/components/GDP.js\",\n    _s = $RefreshSig$();\n\n// This component could use some cleaning up... Should get rid of all the [min_max] indexing\n// More time effecient solution could be written for determining min and max GDP's\nimport { useState, useRef } from 'react';\nimport FlagStat from \"./FlagStat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GDP(_ref) {\n  _s();\n\n  let {\n    mapState,\n    country_data,\n    country_gdp,\n    text,\n    min_max,\n    comp_index\n  } = _ref;\n  let target_gdp = useRef([[null, null], [null, null]]);\n  let gdp_array = useRef([[], []]);\n  let flag_array = useRef([[], []]);\n  let prev_countries = useRef(['', '']);\n  let prev_selected = useRef([false, false]);\n  const [targetCountry, setTargetCountry] = useState([0, '']);\n\n  function calculateTargetGDP() {\n    let index;\n    prev_countries.current[min_max] = mapState.countryCode;\n    prev_selected[min_max] = mapState.isSelected;\n    let gdp = country_gdp.find(i => i.country === mapState.countryName)[comp_index];\n\n    if (!mapState.isSelected) {\n      index = gdp_array[min_max].indexOf(gdp);\n      gdp_array[min_max] = gdp_array[min_max].filter(function (e) {\n        return e !== gdp;\n      });\n      flag_array[min_max].splice(index, 1);\n\n      if (gdp_array[min_max].length === 0) {\n        target_gdp[min_max] = [null, null];\n        setTargetCountry([0, '']);\n        return;\n      }\n\n      if (gdp === target_gdp[min_max][0]) {\n        let new_target_gdp;\n\n        if (min_max === 1) {\n          new_target_gdp = Math.max(...gdp_array[min_max]);\n        } else {\n          new_target_gdp = Math.min(...gdp_array[min_max]);\n        }\n\n        index = gdp_array[min_max].indexOf(new_target_gdp);\n        target_gdp[min_max] = [new_target_gdp, flag_array[min_max][index]];\n        setTargetCountry(target_gdp[min_max]);\n      }\n\n      return;\n    }\n\n    let flag = country_data.find(i => i.cca2 === mapState.countryCode).flag;\n    gdp_array[min_max].push(gdp);\n    flag_array[min_max].push(flag);\n\n    if (min_max === 1) {\n      if (gdp > target_gdp[min_max][0] || !target_gdp[min_max][0]) {\n        target_gdp[min_max] = [gdp, flag];\n        setTargetCountry(target_gdp[min_max]);\n      }\n    } else {\n      if (gdp < target_gdp[min_max][0] || !target_gdp[min_max][0]) {\n        target_gdp[min_max] = [gdp, flag];\n        setTargetCountry(target_gdp[min_max]);\n      }\n    }\n  }\n\n  if (mapState.countryCode !== '' && (mapState.countryCode !== prev_countries[min_max] || mapState.isSelected !== prev_selected[min_max])) {\n    calculateTargetGDP();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"GDP\",\n    children: /*#__PURE__*/_jsxDEV(FlagStat, {\n      valueEnd: targetCountry[0],\n      country_flag: targetCountry[1],\n      heading_text: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GDP, \"auvoS3F5v9X8Xy2MwXgVUBwTLEQ=\");\n\n_c = GDP;\nexport default GDP;\n\nvar _c;\n\n$RefreshReg$(_c, \"GDP\");","map":{"version":3,"sources":["/Users/jaylenschelb/dev/courses/Year 2/Term 3/ACS 1310/final_project/src/components/GDP.js"],"names":["useState","useRef","FlagStat","GDP","mapState","country_data","country_gdp","text","min_max","comp_index","target_gdp","gdp_array","flag_array","prev_countries","prev_selected","targetCountry","setTargetCountry","calculateTargetGDP","index","current","countryCode","isSelected","gdp","find","i","country","countryName","indexOf","filter","e","splice","length","new_target_gdp","Math","max","min","flag","cca2","push"],"mappings":"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","sourcesContent":["// This component could use some cleaning up... Should get rid of all the [min_max] indexing\n// More time effecient solution could be written for determining min and max GDP's\n\nimport { useState, useRef } from 'react'\nimport FlagStat from \"./FlagStat\";\n\n\n\nfunction GDP({ mapState, country_data, country_gdp, text, min_max, comp_index }) {\n\n    let target_gdp = useRef([[null, null], [null, null]])\n    let gdp_array = useRef([[], []])\n    let flag_array = useRef([[], []])\n    let prev_countries = useRef(['', ''])\n    let prev_selected = useRef([false, false])\n\n    const [targetCountry, setTargetCountry] = useState([0, '']);\n\n    function calculateTargetGDP() {\n        let index\n        prev_countries.current[min_max] = mapState.countryCode\n        prev_selected[min_max] = mapState.isSelected\n\n        let gdp = country_gdp.find(i=>i.country === mapState.countryName)[comp_index]\n\n        if (!mapState.isSelected) {\n            index = gdp_array[min_max].indexOf(gdp)\n            gdp_array[min_max] = gdp_array[min_max].filter(function(e) { return e !== gdp })\n            flag_array[min_max].splice(index, 1)\n\n            if (gdp_array[min_max].length === 0) {\n                target_gdp[min_max] = [null, null]\n                setTargetCountry([0, ''])\n                return\n            }\n\n            if (gdp === target_gdp[min_max][0]) {\n                let new_target_gdp\n\n                if (min_max === 1) {\n                    new_target_gdp = Math.max(...gdp_array[min_max])\n                } else {\n                    new_target_gdp = Math.min(...gdp_array[min_max])\n                }\n\n                index = gdp_array[min_max].indexOf(new_target_gdp)\n                target_gdp[min_max] = [new_target_gdp, flag_array[min_max][index]]\n                setTargetCountry(target_gdp[min_max])\n            }\n\n            return\n        }\n\n        let flag = country_data.find(i=>i.cca2 === mapState.countryCode).flag\n        gdp_array[min_max].push(gdp)\n        flag_array[min_max].push(flag)\n\n        if (min_max === 1) {\n            if (gdp > target_gdp[min_max][0] || !target_gdp[min_max][0]) {\n                target_gdp[min_max] = [gdp, flag]\n                setTargetCountry(target_gdp[min_max])\n            }\n        } else {\n            if (gdp < target_gdp[min_max][0] || !target_gdp[min_max][0]) {\n                target_gdp[min_max] = [gdp, flag]\n                setTargetCountry(target_gdp[min_max])\n            }\n        }\n    }\n\n\n    if (mapState.countryCode !== '' && (mapState.countryCode !== prev_countries[min_max] || mapState.isSelected !== prev_selected[min_max])) {\n        calculateTargetGDP()\n    }\n\n    return (\n        <div className=\"GDP\">\n            <FlagStat\n                valueEnd={targetCountry[0]}\n                country_flag={targetCountry[1]}\n                heading_text={text}\n            />\n        </div>\n    )\n}\n  \n  export default GDP"]},"metadata":{},"sourceType":"module"}