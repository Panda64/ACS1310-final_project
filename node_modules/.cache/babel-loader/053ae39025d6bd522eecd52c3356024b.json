{"ast":null,"code":"var _jsxFileName = \"/Users/jaylenschelb/dev/courses/Year 2/Term 3/ACS 1310/final_project/src/components/GDP.js\",\n    _s = $RefreshSig$();\n\n// This component could use some cleaning up... Should get rid of all the [min_max] indexing\n// More time effecient solution could be written for determining min and max GDP's\nimport { useState } from 'react';\nimport FlagStat from \"./FlagStat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet target_gdp = [[null, null], [null, null]];\nlet gdp_array = [[], []];\nlet flag_array = [[], []];\nlet prev_countries = ['', ''];\nlet prev_selected = [false, false];\n\nfunction GDP(_ref) {\n  _s();\n\n  let {\n    mapState,\n    country_data,\n    country_gdp,\n    text,\n    min_max,\n    comp_index\n  } = _ref;\n  const [targetCountry, setTargetCountry] = useState([0, '']);\n\n  function calculateTargetGDP() {\n    let index;\n    prev_countries[min_max] = mapState.countryCode;\n    prev_selected[min_max] = mapState.isSelected;\n    let gdp = country_gdp.find(i => i.country === mapState.countryName);\n\n    if (!mapState.isSelected) {\n      index = gdp_array[min_max].indexOf(gdp);\n      gdp_array[min_max] = gdp_array[min_max].filter(function (e) {\n        return e !== gdp;\n      });\n      flag_array[min_max].splice(index, 1);\n\n      if (gdp_array[min_max].length === 0) {\n        target_gdp[min_max] = [null, null];\n        setTargetCountry([0, '']);\n        return;\n      }\n\n      if (gdp === target_gdp[min_max][0]) {\n        let new_target_gdp;\n\n        if (min_max === 1) {\n          new_target_gdp = Math.max(...gdp_array[min_max]);\n        } else {\n          new_target_gdp = Math.min(...gdp_array[min_max]);\n        }\n\n        index = gdp_array[min_max].indexOf(new_target_gdp);\n        target_gdp[min_max] = [new_target_gdp, flag_array[min_max][index]];\n        setTargetCountry(target_gdp[min_max]);\n      }\n\n      return;\n    }\n\n    let flag = country_data.find(i => i.cca2 === mapState.countryCode).flag;\n    gdp_array[min_max].push(gdp);\n    flag_array[min_max].push(flag);\n\n    if (min_max === 1) {\n      if (gdp > target_gdp[min_max][0] || !target_gdp[min_max][0]) {\n        target_gdp[min_max] = [gdp, flag];\n        setTargetCountry(target_gdp[min_max]);\n      }\n    } else {\n      if (gdp < target_gdp[min_max][0] || !target_gdp[min_max][0]) {\n        target_gdp[min_max] = [gdp, flag];\n        setTargetCountry(target_gdp[min_max]);\n      }\n    }\n  }\n\n  if (mapState.countryCode !== '' && (mapState.countryCode !== prev_countries[min_max] || mapState.isSelected !== prev_selected[min_max])) {\n    calculateTargetGDP();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"GDP\",\n    children: /*#__PURE__*/_jsxDEV(FlagStat, {\n      valueEnd: targetCountry[0],\n      country_flag: targetCountry[1],\n      heading_text: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GDP, \"Pqg6GKqlD/SbE/0xii30kHy5xws=\");\n\n_c = GDP;\nexport default GDP;\n\nvar _c;\n\n$RefreshReg$(_c, \"GDP\");","map":{"version":3,"sources":["/Users/jaylenschelb/dev/courses/Year 2/Term 3/ACS 1310/final_project/src/components/GDP.js"],"names":["useState","FlagStat","target_gdp","gdp_array","flag_array","prev_countries","prev_selected","GDP","mapState","country_data","country_gdp","text","min_max","comp_index","targetCountry","setTargetCountry","calculateTargetGDP","index","countryCode","isSelected","gdp","find","i","country","countryName","indexOf","filter","e","splice","length","new_target_gdp","Math","max","min","flag","cca2","push"],"mappings":"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","sourcesContent":["// This component could use some cleaning up... Should get rid of all the [min_max] indexing\n// More time effecient solution could be written for determining min and max GDP's\n\nimport { useState } from 'react'\nimport FlagStat from \"./FlagStat\";\n\nlet target_gdp = [[null, null], [null, null]]\nlet gdp_array = [[], []]\nlet flag_array = [[], []]\nlet prev_countries = ['', '']\nlet prev_selected = [false, false]\n\nfunction GDP({ mapState, country_data, country_gdp, text, min_max, comp_index }) {\n    const [targetCountry, setTargetCountry] = useState([0, '']);\n\n    function calculateTargetGDP() {\n        let index\n        prev_countries[min_max] = mapState.countryCode\n        prev_selected[min_max] = mapState.isSelected\n\n        let gdp = country_gdp.find(i=>i.country === mapState.countryName)\n\n        if (!mapState.isSelected) {\n            index = gdp_array[min_max].indexOf(gdp)\n            gdp_array[min_max] = gdp_array[min_max].filter(function(e) { return e !== gdp })\n            flag_array[min_max].splice(index, 1)\n\n            if (gdp_array[min_max].length === 0) {\n                target_gdp[min_max] = [null, null]\n                setTargetCountry([0, ''])\n                return\n            }\n\n            if (gdp === target_gdp[min_max][0]) {\n                let new_target_gdp\n\n                if (min_max === 1) {\n                    new_target_gdp = Math.max(...gdp_array[min_max])\n                } else {\n                    new_target_gdp = Math.min(...gdp_array[min_max])\n                }\n\n                index = gdp_array[min_max].indexOf(new_target_gdp)\n                target_gdp[min_max] = [new_target_gdp, flag_array[min_max][index]]\n                setTargetCountry(target_gdp[min_max])\n            }\n\n            return\n        }\n\n        let flag = country_data.find(i=>i.cca2 === mapState.countryCode).flag\n        gdp_array[min_max].push(gdp)\n        flag_array[min_max].push(flag)\n\n        if (min_max === 1) {\n            if (gdp > target_gdp[min_max][0] || !target_gdp[min_max][0]) {\n                target_gdp[min_max] = [gdp, flag]\n                setTargetCountry(target_gdp[min_max])\n            }\n        } else {\n            if (gdp < target_gdp[min_max][0] || !target_gdp[min_max][0]) {\n                target_gdp[min_max] = [gdp, flag]\n                setTargetCountry(target_gdp[min_max])\n            }\n        }\n    }\n\n\n    if (mapState.countryCode !== '' && (mapState.countryCode !== prev_countries[min_max] || mapState.isSelected !== prev_selected[min_max])) {\n        calculateTargetGDP()\n    }\n\n    return (\n        <div className=\"GDP\">\n            <FlagStat\n                valueEnd={targetCountry[0]}\n                country_flag={targetCountry[1]}\n                heading_text={text}\n            />\n        </div>\n    )\n}\n  \n  export default GDP"]},"metadata":{},"sourceType":"module"}